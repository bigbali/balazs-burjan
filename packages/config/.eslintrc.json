{
    "overrides": [
        {
            "extends": ["plugin:@typescript-eslint/recommended-requiring-type-checking"],
            "files": ["*.ts", "*.tsx", "*.mjs", "*.cjs", "*.svelte"],
            "parserOptions": {
                "project": ["./tsconfig.json", "./packages/*/tsconfig.json", "./apps/*/tsconfig.json"]
            }
        }
    ],
    "root": true,
    "parser": "@typescript-eslint/parser",
    "plugins": ["@typescript-eslint"],
    "extends": ["next/core-web-vitals", "plugin:@typescript-eslint/recommended"],
    "rules": {
        "linebreak-style": ["error", "unix"],
        "max-len": ["error", 135],
        "object-curly-spacing": ["warn", "always"],
        "quotes": ["warn", "single"],
        "jsx-quotes": ["warn", "prefer-single"],
        "no-trailing-spaces": "warn",
        "semi": "error",
        "comma-dangle": [
            "warn",
            {
                "arrays": "never",
                "objects": "never",
                "imports": "never",
                "exports": "never",
                "functions": "never"
            }
        ],
        "indent": [
            "error",
            4,
            {
                "SwitchCase": 1
            }
        ],
        "no-redeclare": [
            "error",
            {
                "builtinGlobals": false
            }
        ],
        "import/no-anonymous-default-export": "off",
        "@typescript-eslint/consistent-type-imports": "warn",
        "@typescript-eslint/ban-ts-comment": "off",
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-extra-semi": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/require-await": "off",
        "@typescript-eslint/semi": "error",
        "@typescript-eslint/naming-convention": [
            "error",
            {
                "selector": "enumMember",
                "format": ["UPPER_CASE"],
                "custom": {
                    "regex": "[A-Z]",
                    "match": true
                }
            },
            {
                "selector": "interface",
                "format": ["PascalCase"],
                "custom": {
                    "regex": "^I?[A-Z]",
                    "match": true
                }
            }
        ]
    }
}
