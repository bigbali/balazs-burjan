{
  "overrides": [
    {
      "extends": [
        "plugin:@typescript-eslint/recommended-requiring-type-checking"
      ],
      "files": ["*.ts", "*.tsx", "**/*.json"],
      "parserOptions": {
        "project": "tsconfig.json"
      }
    }
  ],
  "parser": "@typescript-eslint/parser",
  "parserOptions": {
    "project": "./tsconfig.json"
  },
  "plugins": ["@typescript-eslint"],
  "extends": ["next/core-web-vitals", "plugin:@typescript-eslint/recommended"],
  "rules": {
    "linebreak-style": 0,
        "comma-dangle": 0,
        "max-len": [
            "error",
            135
        ],
        "object-curly-spacing": [
            "error",
            "always"
        ],
        "quotes": [
            "error",
            "single"
        ],
        "jsx-quotes": [
            "error",
            "single"
        ],
        "no-trailing-spaces": "error",
        "semi": "error",
        "indent": [
            "error",
            4,
            {
                "SwitchCase": 1
            }
        ],
        "no-redeclare": [
            "error",
            {
                "builtinGlobals": false
            }
        ],
        "@typescript-eslint/consistent-type-imports": "warn",
        "@typescript-eslint/ban-ts-comment": "off",
        "@typescript-eslint/no-non-null-assertion": "off",
        "@typescript-eslint/no-extra-semi": "off",
        "@typescript-eslint/no-explicit-any": "off",
        "@typescript-eslint/no-empty-function": "off",
        "@typescript-eslint/no-unsafe-assignment": "off",
        "@typescript-eslint/require-await": "off",
        "@typescript-eslint/semi": "error",
        "@typescript-eslint/naming-convention": [
            "error",
            {
                "selector": "enumMember",
                "format": [
                    "UPPER_CASE"
                ],
                "custom": {
                    "regex": "[A-Z]",
                    "match": true
                }
            },
            {
                "selector": "interface",
                "format": [
                    "PascalCase"
                ],
                "custom": {
                    "regex": "^I?[A-Z]",
                    "match": true
                }
            }
        ]
  }
}
